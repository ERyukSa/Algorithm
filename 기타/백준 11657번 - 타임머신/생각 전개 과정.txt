다익스트라는 음의 간선이 포함되어 있을 경우 음의 순환이 발생하여 최단 경로를 구하지 못하는 상황이 생긴다.
혹은 인접 노드로 다이렉트로 가지 않고 돌아서 갔을 때 음의 간선으로 인해 더 최소의 경로를 구할 수 있음에도 잘못 구하는 상황이 생긴다.
순환 속에서 가중치 합이 계속 음수로 작아지기 때문이다.

[벨만 포드 알고리즘]
- 이렇게 음의 간선이 있는 상황에서 최단 경로를 찾을 때 벨만 포드 알고리즘을 사용할 수 있다.
- 모든 간선을 확인하여 시작 지점으로부터의 최단 경로를 갱신하는 작업을 [nodeCount - 1]번 반복한다.
- 벨만 포드는 음의 순환을 감지할 수 있다.
- 최단 경로 갱신 작업을 nodeCount번째 반복했을 때 경로 갱신이 발생하면 음의 순환이 있다는 뜻이다.
- 시간복잡도는 O(VE)로 다익스트라보다 느리다.

[풀이 알고리즘]
1. 연결리스트로 저장한다
2. 최단 시간 테이블을 INF로 초기화한다.
3. 테이블의 시작 지점 시간를 0으로 초기화한다.
4. 반복문을 nodeCount만큼 돌린다 (최단 경로의 간선 개수 + 음의 순환 확인용 1회)
5. 반복문을 nodeCount만큼 돌린다
6. 시작점에서 현재 간선의 출발 도시를 거쳐 도착 도시로 가는 시간 < 테이블에 저장된 도착 도시로 가는 시간,
     -> 테이블을 갱신
7. 반복 횟수가 nodeCount인 시점에서 테이블이 갱신될 경우 -1을 출력하고, 아니면 2~n번 도시로 가는 최단시간을
    출력한다.
8. 테이블이 초기 값에서 갱신이 안됐을 경우 해당 도시로 가는 경로가 없다는 뜻이므로 -1 출력